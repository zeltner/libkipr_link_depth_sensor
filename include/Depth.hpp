/* *****************************************************************************

    This file is part of the depth sensor library for the
        KIPR Link Robot Controller.

    libkipr_link_depth_sensor is free software: you can redistribute it and/or
    modify it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    libkipr_link_depth_sensor is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with libkipr_link_depth_sensor.
    If not, see <http://www.gnu.org/licenses/>.

*******************************************************************************/

/**
 * \file depth.hpp
 * \brief C++ API of the KIPR Link depth sensor interface
 * \author Stefan Zeltner
 */

#ifndef _DEPTH_HPP_
#define _DEPTH_HPP_

#include "DepthMapResolution.h"

/*
enum DepthMapResolution
{

};

class DepthMap
{
public:
    struct Point
    {
        const unsigned int x;
        const unsigned int y;

        Point(unsigned int x, unsigned int y) : x(x), y(y) {}
    };

    struct Region
    {
        const Point lowerLeftCorner;
        const Point upperRightCorner;

        Region(const Point& lowerLeftCorner, const Point& upperRightCorner)
            : lowerLeftCorner(lowerLeftCorner),
              upperRightCorner(upperRightCorner) {}
    };

public:
    DepthMap();
    ~DepthMap();

    /**
     * Get the width of this depth map
     * \return The resolution of this depth map
     *
    unsigned int getWidth() const;

    /**
     * Get the width of this depth map
     * \return The resolution of this depth map
     *
    unsigned int getHeight() const;

    /**
     * Returns a DepthMap object containing a subregion of the current map
     * \param subRegion Selected subregion
     * \return A DepthMap opject containing the subregion
     *
    const DepthMap getSubRegion(Region subRegion) const;

    /**
     * Get the closest point within the selected region
     * \note Advanced level
     * \return The closest point
     * \see depth_map_select_subregion
     * \see depth_map_select_row
     * \see depth_get_closest_point_distance
     *
    const Point depth_get_closest_point() const;

    /**
     * Get the distance of the closest point within the selected region
     * \return The distance of the closest point
     * \see depth_map_select_subregion
     * \see depth_map_select_row
     * \see depth_get_closest_point
     *
    int depth_get_closest_point_distance();
};*/

namespace libkipr_link_depth_sensor
{
  class Depth
  {
  public:
    static Depth& instance();

    /**
      * Opens the depth sensor
      */
    void open();

    /**
      * Closes the depth sensor
      */
    void close();
  /*
      /**
      * Get the current depth map resolution
      * \return The current depth map resolution
      * \see Depth::setResolution
      *
      DepthMapResolution getResolution() const;

      /**
      * Set the current depth map resolution
      * \note Advanced level
      * \note Changing the resolution will only affect the future depth maps
      *       generated by Depth::getDepthMap
      * \param resolution New resolution
      * \return 1 on success, 0 otherwise
      * \see Depth::getDepthMap
      * \see Depth::getResolution
      *
      void setResolution(DepthMapResolution resolution);

      /**
      * Returns an object containing the current depth map for future processing
      *
      DepthMap getDepthMap(); */

  private:
    // Depth is a singleton
    Depth();
    Depth(Depth const&);
    void operator=(Depth const&);
  };
}

#endif /* _DEPTH_HPP_ */
